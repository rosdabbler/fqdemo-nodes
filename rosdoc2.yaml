# rosdoc2 documentation configuration.
# usage: rosdoc2 build -p ./ -d doc/_build/build -c doc/_build/cross_reference -o doc/_build/output

# This 'attic section' self-documents this file's type and version.
type: 'rosdoc2 config'
version: 1

---

settings:
    # If this is true, a standard index page is generated in the output directory.
    # It uses the package information from the 'package.xml' to show details
    # about the package, creates a table of contents for the various builders
    # that were run, and may contain links to things like build farm jobs for
    # this package or links to other versions of this package.

    # If false, you can still include content that would have been in the index
    # into one of your '.rst' files from your Sphinx project, using the
    # '.. include::' directive in Sphinx.
    # For example, you could include it in a custom 'index.rst' so you can have
    # the standard information followed by custom content.

    # TODO(wjwwood): provide a concrete example of this (relative path?)

    # If this is not specified explicitly, it defaults to 'true'.
    generate_package_index: true

    # This setting is relevant mostly if the standard Python package layout cannot
    # be assumed for 'sphinx-apidoc' invocation. The user can provide the path
    # (relative to the 'package.xml' file) where the Python modules defined by this
    # package are located.
    python_source: 'fqdemo_nodes'

    # This setting, if true, attempts to run `doxygen` and the `breathe`/`exhale`
    # extensions to `sphinx` regardless of build type. This is most useful if the
    # user would like to generate C/C++ API documentation for a package that is not
    # of the `ament_cmake/cmake` build type.
    always_run_doxygen: false

    # This setting, if true, attempts to run `sphinx-apidoc` regardless of build
    # type. This is most useful if the user would like to generate Python API
    # documentation for a package that is not of the `ament_python` build type.
    always_run_sphinx_apidoc: true

builders:
    # Each stanza represents a separate build step, performed by a specific 'builder'.
    # The key of each stanza is the builder to use; this must be one of the
    # available builders.
    - doxygen: {
        # Supported keys for the builder_entry_dictionary include:
        #
        # - name (str) (required)
        #   - name of the documentation, used in reference to the content generated by this builder
        # - builder (str) (required)
        #   - required for all builders, must be 'doxygen' to use this class
        # - doxyfile (str) (optional)
        #   - relative path, from the config file, to a Doxyfile to be used instead of the default
        # - extra_doxyfile_statements (list[str]) (optional)
        #   - extra doxyfile statements which would be added after the default, or user, doxyfile
        name: 'doxygen_builder',
        output_dir: 'generated/doxygen',
        doxyfile: 'Doxyfile',
        extra_doxyfile_statements: []
    }
    - sphinx: {
        # Supported keys for the builder_entry_dictionary include:
        # 
        # - name (str) (required)
        #   - name of the documentation, used in reference to the content generated by this builder
        # - builder (str) (required)
        #   - required for all builders, must be 'sphinx' to use this class
        # - sphinx_sourcedir (str) (optional)
        #   - directory containing the Sphinx project, i.e. the `conf.py`, the setting
        #     you would pass to sphinx-build as SOURCEDIR. Defaults to `doc`.
        # - doxygen_xml_directory (str) (optional)
        #   - directory containing doxygen xml files, relative to --output-directory
        #         
        name: 'sphinx_builder',
        doxygen_xml_directory: 'generated/doxygen/xml',
        output_dir: 'my_output_dir',
        sphinx_sourcedir: 'doc'
    }
